#!/bin/bash

# Default values
TIME=""
DEST=$HOME/restore_$(date +%Y%m%d)
OUT=$(mktemp)
TITLE="Backup-Desktop"

function show_help {
  echo 'backup [-f] [-h] [-t] [-d] [clean|list|restore|verify]'
  echo '-b :       Run in daemon mode, send Pushover notifications'
  echo '-d :       Specify target directory, default: restore_$timestamp$ [restore]'
  echo '-f :       Specify files to use to restore'
  echo '-h :       Show this help'
  echo '-m :       Backup Doortje directory'
  echo '-t :       Specify time range to use, e.g. 1W 2M [list|restore]'
  echo ''
  echo 'restore :  Restore files from backup'
  echo 'full    :  Perfom full backup of all files'
  echo 'clean   :  Clean backup directory from outdated backup files'
  echo 'list    :  List files currently in backup'
}

# Read config file
if [ -f $HOME/.duplicity/backup.conf ]
then
  source $HOME/.duplicity/backup.conf  
else
  echo "[WARN] $HOME/.duplicity/backup.conf file not found!"
  exit 1
fi

while getopts "bhmd:f:t:" opt; do
  case $opt in
    b)
      DAEMON=true
      ;;
    d)
      DEST=$OPTARG
      ;;
    f)
      FILES="--file-to-restore $OPTARG"
      ;;
    m)
      DIR=/home/doortje
      TITLE="Backup-Doortje"
      URL=$URL_DOOR
      ;;
    t)
      TIME="-t $OPTARG"
      ;;
    h)
      rm $OUT
      show_help
      exit 0
      ;;
    \?)
      rm $OUT
      show_help
      exit 1
      ;;
  esac
done

# Send Pushover message
if [ $DAEMON ]
then
  pushover -t $TITLE 'Backup started'
  sleep 1m
fi

export FTP_PASSWORD=$(zenity --password --title='Enter STACK password' 2> /dev/null)

case ${@: -1} in
  "list")
    echo "Retrieving list of backup files"
    duplicity list-current-files $TIME --gpg-binary=$BIN --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL
    ;;
  "full")
    echo "Performing full backup"
    duplicity full --gpg-binary=$BIN --allow-source-mismatch --asynchronous-upload --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY --exclude-filelist=${DIR}/.duplicity/exclude.lst $DIR $URL 2>&1 | tee -a $OUT
    echo "Removing old backups"
    duplicity remove-older-than 1Y --gpg-binary=$BIN --force --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL 2>&1 | tee -a $OUT 
    ;;
  "clean")
    echo "Cleaning backup"
    duplicity cleanup --gpg-binary=$BIN --force --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL
    ;;
  "restore")
    echo "Restoring from backup"
    if [ ! -d $DEST ]
    then
      mkdir $DEST
    fi
    duplicity restore $FILES $TIME --gpg-binary=$BIN --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL $DEST
  ;;
  "verify")
    echo "Verifying backup"
    duplicity verify $FILES $TIME --gpg-binary=$BIN --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL $DIR
  ;;
  *)
    # Run additional scripts before backup
    if [ -n $EXEC_DIR ]; then
      echo "Running additional scripts"
      find $EXEC_DIR -maxdepth 1 -type f -executable -name '*.sh' -exec {} \; 2>&1 | tee -a $OUT
    fi

    echo "Performing incremental backup"
    duplicity --gpg-binary=$BIN --allow-source-mismatch --asynchronous-upload --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY --full-if-older-than 6M --exclude-filelist=${DIR}/.duplicity/exclude.lst $DIR $URL 2>&1 | tee -a $OUT
    echo "Removing old backups"
    duplicity remove-older-than 1Y --gpg-binary=$BIN --force --use-agent --encrypt-key=$GPG_ENCRYPT_KEY --sign-key=$GPG_SIGN_KEY $URL 2>&1 | tee -a $OUT 
  ;;
esac

if [ $DAEMON ]
then
  pushover -t "$TITLE finished" $(cat $OUT)
fi

unset FTP_PASSWORD
rm $OUT
