#!/bin/bash

# Read config file
source $HOME/.duplicity/backup.conf

# Default values
TIME=""
OUT=$(mktemp)
DEST="${DIR}/backup"
TITLE="Backup desktop"

function show_help {
  echo 'backup [-f] [-h] [-t] [-d] [clean|list|restore|verify]'
  echo '-h :       Show this help'
  echo '-f :       Specify files to use to restore'
  echo '-t :       Specify time range to use, e.g. 1w 2m [list|restore]'
  echo '-d :       Specify target directory [restore]'
  echo '-m :       Backup Doortje directory'
  echo ''
  echo 'restore :  Restore files from backup'
  echo 'clean   :  Clean backup directory from outdated backup files'
  echo 'list    :  List files currently in backup'
}

while getopts "bhmd:f:t:" opt; do
  case $opt in
    b)
      DAEMON=true
      ;;
    d)
      DEST=$OPTARG
      ;;
    f)
      FILES="--file-to-restore $OPTARG"
      ;;
    m)
      DIR=/home/doortje
      TITLE="Backup Doortje"
      URL=$URL_DOOR
      ;;
    t)
      TIME="-t $OPTARG"
      ;;
    h)
      rm $OUT
      show_help
      exit 0
      ;;
    \?)
      rm $OUT
      show_help
      exit 1
      ;;
  esac
done

if [ $DAEMON ]
then
  pushover -t $TITLE 'Backup started'
  sleep 1m
fi

export FTP_PASSWORD=$(zenity --password --title='Enter STACK password' 2> /dev/null)

case ${@: -1} in
  "list")
    duplicity list-current-files $TIME --use-agent --encrypt-sign-key=$GPG_KEY $URL
    ;;
  "clean")
    duplicity cleanup --force --use-agent --encrypt-sign-key=$GPG_KEY $URL
    ;;
  "restore")
    duplicity restore $FILES $TIME --use-agent --encrypt-sign-key=$GPG_KEY $URL $DEST
  ;;
  "verify")
    duplicity verify $FILES $TIME --use-agent --encrypt-sign-key=$GPG_KEY $URL $DIR
  ;;
  *)
    duplicity --asynchronous-upload --use-agent --encrypt-sign-key=$GPG_KEY --full-if-older-than 4M --exclude-filelist=${DIR}/.duplicity/exclude.lst $DIR $URL >> $OUT 
    duplicity remove-older-than 6M --force --use-agent --encrypt-sign-key=$GPG_KEY $URL >> $OUT 
  ;;
esac

if [ $DAEMON ]
then
  pushover -t "$TITLE finished" $(cat $OUT)
else
  cat $OUT
fi

unset FTP_PASSWORD
rm $OUT
